{"ast":null,"code":"var _jsxFileName = \"/home/nicole/Desktop/1.Kenzie/Q2/3.SP3/gestao-de-habitos/src/Providers/Groups/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport api from \"../../services/api\";\nimport { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GroupsContext = /*#__PURE__*/createContext();\nexport const GroupsProvider = ({\n  children\n}) => {\n  _s();\n\n  const [groups, setGroups] = useState([]);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [token] = useState(JSON.parse(localStorage.getItem(\"Habits:token\")) || \"\");\n  const [loadingGroups, setLoadingGroups] = useState(true);\n  const [loadingSubs, setLoadingSubs] = useState(true);\n  useEffect(() => {\n    //get dos grupos\n    if (token !== \"\") {\n      api.get(\"/groups/?category=CORINGA\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        const allGroups = response.data.results;\n        setGroups(allGroups);\n        setLoadingGroups(false);\n      }).catch(err => console.log(err)); //get das inscrições api\n\n      api.get(\"/groups/subscriptions/\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        setSubscriptions(response.data);\n        setLoadingSubs(false);\n      }).catch(err => console.log(err));\n    }\n  }, [token]);\n\n  const addNewGroup = ({\n    name,\n    description,\n    category\n  }) => {\n    api.post(\"/groups/\", {\n      name: name,\n      description: description,\n      category: category\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  };\n\n  const subscribeToAGropup = group_id => {\n    console.log(group_id);\n    console.log(token);\n    api.post(`/groups/${group_id}/subscribe/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(_ => toast.success(\"Parabéns! Você faz parte de um novo grupo\")).catch(e => console.log(\"erro \", e));\n  };\n\n  return /*#__PURE__*/_jsxDEV(GroupsContext.Provider, {\n    value: {\n      groups,\n      subscriptions,\n      addNewGroup,\n      loadingGroups,\n      loadingSubs,\n      subscribeToAGropup\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GroupsProvider, \"0y3xDrLnC5K/GCj7b4ZoEYB+KQY=\");\n\n_c = GroupsProvider;\nexport const useGroups = () => {\n  _s2();\n\n  return useContext(GroupsContext);\n};\n\n_s2(useGroups, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupsProvider\");","map":{"version":3,"sources":["/home/nicole/Desktop/1.Kenzie/Q2/3.SP3/gestao-de-habitos/src/Providers/Groups/index.js"],"names":["createContext","useContext","useState","api","useEffect","toast","GroupsContext","GroupsProvider","children","groups","setGroups","subscriptions","setSubscriptions","token","JSON","parse","localStorage","getItem","loadingGroups","setLoadingGroups","loadingSubs","setLoadingSubs","get","headers","Authorization","then","response","allGroups","data","results","catch","err","console","log","addNewGroup","name","description","category","post","subscribeToAGropup","group_id","_","success","e","useGroups"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport api from \"../../services/api\";\nimport { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\n\nexport const GroupsContext = createContext();\n\nexport const GroupsProvider = ({ children }) => {\n  const [groups, setGroups] = useState([]);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [token] = useState(\n    JSON.parse(localStorage.getItem(\"Habits:token\")) || \"\"\n  );\n  const [loadingGroups, setLoadingGroups] = useState(true);\n  const [loadingSubs, setLoadingSubs] = useState(true);\n\n  useEffect(() => {\n    //get dos grupos\n    if (token !== \"\") {\n      api\n        .get(\"/groups/?category=CORINGA\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        .then((response) => {\n          const allGroups = response.data.results;\n          setGroups(allGroups);\n          setLoadingGroups(false);\n        })\n        .catch((err) => console.log(err));\n\n      //get das inscrições api\n      api\n        .get(\"/groups/subscriptions/\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        .then((response) => {\n          setSubscriptions(response.data);\n          setLoadingSubs(false);\n        })\n        .catch((err) => console.log(err));\n    }\n  }, [token]);\n\n  const addNewGroup = ({ name, description, category }) => {\n    api.post(\n      \"/groups/\",\n      {\n        name: name,\n        description: description,\n        category: category,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  };\n\n  const subscribeToAGropup = (group_id) => {\n    console.log(group_id);\n    console.log(token);\n    api\n      .post(`/groups/${group_id}/subscribe/`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((_) => toast.success(\"Parabéns! Você faz parte de um novo grupo\"))\n      .catch((e) => console.log(\"erro \", e));\n  };\n\n  return (\n    <GroupsContext.Provider\n      value={{\n        groups,\n        subscriptions,\n        addNewGroup,\n        loadingGroups,\n        loadingSubs,\n        subscribeToAGropup,\n      }}\n    >\n      {children}\n    </GroupsContext.Provider>\n  );\n};\n\nexport const useGroups = () => useContext(GroupsContext);\n"]},"metadata":{},"sourceType":"module"}